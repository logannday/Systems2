CSCI-347 Learning Reflection

Name:

================================================================
1. What are some of the most important lessons you learned while working on
this assignment? Why do you think so? I learned that multithreading can greatly
increase the efficiency of code by allowing multiple tasks to be performed at
the same time. This is important because it allows for the program to be more
efficient and faster. I also learned that multithreading can be difficult to
implement and can cause issues if not done correctly. This is important because
it shows that multithreading is not always the best solution and can cause more
issues than it solves. I also learned about potential issues with
multithreading such as race conditions, and how to avoid them by using locks. 
I also got more practice solving memory leaks and segmentation faults by using
valgrind. My internet was down for a few house so I was unable to work through
ssh, and I worked on mac for a few commits. When I got back on linux, the code
was broken and I had to use valgrind to find the cause of the seg fault that
was not happening on darwin.



==========================================================================
2. What do you want to learn more about, and why?
I'd like to learn more about image processing, and techniques for working
with more complex image formats. I'd also like to learn more about how to 
more precisely interpret the output of helgrind.

==========================================================================
3. What were some of your most challenging/powerful moments and what made them so?
The most challenging part was fixng the seg fault that was not happening 
after I developed on mac for a while. It was a bit like finding a needle in a haystack, 
I didn't want to throw away all the code I had worked on because I knew it was almost
functional. I also want to acknowledge that there is an unresolved Helgrind warning
that is every other student I have talked to has also encountered. Helgrind says there
is an invalid write within the thread_spawn function, but I honestly think it is a false
positive. The warning can be resolved by adding a mutex around the call to thread spawn
on line 170, but since this is not a critical region of the code I am not adding the lock.

===============================================================================
4. What did you learn were your greatest strengths? Your biggest areas for improvement?
My biggest strength was my ability write clean multithreaded code with no memory leaks.
In the future, I'd like to learn about more obscure race conditions and more about
the exact implementation of c memory management functions.


===============================================================================
5. Reread the learning objectives (LOs) of the assignment. State them below and rate your confidence about them on a scale from 1 to 5, where 1 is Not Confident at all, and 5 is Very Confident. 
Example: LO1: Demonstrate how to write clean and readable code in C. (Confidence level: 4)
Construct a multithreaded program using POSIX threads. 
    (Confidence level: 5)
Demonstrate how to read and write binary files.
    (Confidence level: 5)
Employ efficient synchronization mechanisms.
    (Confidence level: 5)
Examine race conditions using Helgrind, and memory errors using Valgrind.
    (Confidence level: 4)
Apply C programming best practices (see the code review checklist Download code review checklist).
    (Confidence level: 5)
Recognize the effect of number of threads on the program's performance.
    (Confidence level: 5)











